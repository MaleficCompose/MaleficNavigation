name: Version Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit message and create release
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Check if commit message matches version pattern
          if [[ $COMMIT_MSG =~ ^version\(([0-9]+\.[0-9]+\.[0-9]+)\):.*$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "Version $VERSION detected in commit message"
          
            # Get the latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          
            # Generate changelog
            if [ "$LATEST_TAG" = "none" ]; then
              # If no previous tag exists, use all commits
              CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
              # Get all unique contributors
              CONTRIBUTORS=$(git log --format="%aN <%aE>" --no-merges | sort -u)
            else
              # Get commits since last tag
              CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges ${LATEST_TAG}..HEAD)
              # Get contributors since last tag
              CONTRIBUTORS=$(git log ${LATEST_TAG}..HEAD --format="%aN <%aE>" --no-merges | sort -u)
            fi
          
            # Create a temporary file for the release notes
            {
              echo "# Changelog for version $VERSION"
              echo ""
              echo "$CHANGELOG"
              echo ""
              echo "## Contributors"
              echo ""
              echo "Thank you to all contributors for this release:"
              echo ""
              while IFS= read -r contributor; do
                echo "* $contributor"
              done <<< "$CONTRIBUTORS"
            } > changelog.md
          
            # Create GitHub release
            gh release create "v$VERSION" \
              --title "Version $VERSION" \
              --notes-file changelog.md
          else
            echo "Commit message does not match version pattern. Skipping release creation."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
